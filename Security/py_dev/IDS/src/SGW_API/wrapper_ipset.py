#!/usr/bin/env python
''' 
======================== 
wrapper_ipset.py 
======================== 
Created on Oct.24, 2017 
@author: Xu Ronghua 
@Email: rxu22@binghamton.edu 
@TaskDescription: This module provide wrapper for ipset command
@Reference: http://ipset.netfilter.org/ipset.man.html
'''

import sys
import subprocess

'''
ipset class for wrapping ipset command
'''
class IPSets(object):
	'''
	=========================================Manage ip-set===================================
	'''
	#List the header data and the entries for the specified set, or for all sets if none is given
	@staticmethod
	def list(s_name=''):
		if(s_name==''):
			p = subprocess.Popen(['ipset', 'list'], stdout=subprocess.PIPE)
		else:
			p = subprocess.Popen(['ipset', 'list', s_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
	
	#Create a set identified with setname and specified type
	@staticmethod
	def create(s_name, s_type):
		p = subprocess.Popen(['ipset', 'create', s_name, s_type], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
		
	#Rename a set. Set identified by SETNAME-TO must not exist
	@staticmethod
	def rename(old_name, new_name):
		p = subprocess.Popen(['ipset', 'rename', old_name, new_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
	
	#Destroy the specified set or all the sets if none is given
	@staticmethod
	def destroy(s_name=''):
		if(s_name==''):
			p = subprocess.Popen(['ipset', 'destroy'], stdout=subprocess.PIPE)
		else:
			p = subprocess.Popen(['ipset', 'destroy', s_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
		
	#Flush all entries from the specified set or flush all sets if none is given.
	@staticmethod
	def flush(s_name=''):
		if(s_name==''):
			p = subprocess.Popen(['ipset', 'flush'], stdout=subprocess.PIPE)
		else:
			p = subprocess.Popen(['ipset', 'flush', s_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		#print output
	
	#Save the given set, or all sets if none is given to stdout in a format that restore can read
	@staticmethod
	def save(s_name,f_name):
		if(s_name==''):
			p = subprocess.Popen(['ipset', 'save', '-f', f_name], stdout=subprocess.PIPE)
		else:
			p = subprocess.Popen(['ipset', 'save', s_name, '-f', f_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output

	#Restore a saved session generated by save
	@staticmethod
	def restore(f_name):
		p = subprocess.Popen(['ipset', 'restore', '-f', f_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
	
	'''
	===================================Manage ip-entry===================================
	'''
	#Add a given entry to the set
	@staticmethod
	def add(s_name,e_name):
		p = subprocess.Popen(['ipset', 'add', s_name, e_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output
	
	#Delete an entry from a set
	@staticmethod
	def delete(s_name,e_name):
		p = subprocess.Popen(['ipset', 'del', s_name, e_name], stdout=subprocess.PIPE)
		output, err = p.communicate()
		print output